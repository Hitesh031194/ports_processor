// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/google/wire"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/app"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/app/config"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/app/repository"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/pkg/db"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/pkg/db/migrations"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/pkg/json_processor"
	"github.com/hiteshpattanayak-tw/ports_processor/internal/pkg/logger"
)

// Injectors from wire.go:

func InitializeApp(ctx context.Context, cancel context.CancelFunc) (*app.App, error) {
	stream := json_processor.ProvideJSONStream()
	appConfig, err := config.ProvideAppConfig()
	if err != nil {
		return nil, err
	}
	databaseConfig := appConfig.DatabaseConfig
	serverConfig := appConfig.ServerConfig
	string2 := serverConfig.ServiceName
	gormDB, err := db.ProvideDatabase(databaseConfig, string2)
	if err != nil {
		return nil, err
	}
	portRepository := repository.ProvidePortRepository(gormDB)
	level := serverConfig.LogLevel
	zapLogger, err := logger.ProvideLogger(level)
	if err != nil {
		return nil, err
	}
	migrator, err := migrations.ProvideMigrator(databaseConfig, gormDB, zapLogger)
	if err != nil {
		return nil, err
	}
	appApp := &app.App{
		Ctx:        ctx,
		Cancel:     cancel,
		JsonStream: stream,
		PortRepo:   portRepository,
		Logger:     zapLogger,
		AppConfig:  appConfig,
		Migrator:   migrator,
	}
	return appApp, nil
}

// wire.go:

var configSet = wire.NewSet(config.ProvideAppConfig, wire.FieldsOf(new(config.AppConfig), "DatabaseConfig"), wire.FieldsOf(new(config.AppConfig), "ServerConfig"), wire.FieldsOf(new(config.ServerConfig), "ServiceName"), wire.FieldsOf(new(config.ServerConfig), "LogLevel"))

var logSet = wire.NewSet(logger.ProvideLogger, wire.Bind(new(logger.Logger), new(*logger.ZapLogger)))

var dbSet = wire.NewSet(db.ProvideDatabase, migrations.ProvideMigrator)

var repoSet = wire.NewSet(repository.ProvidePortRepository)

var pkgSet = wire.NewSet(json_processor.ProvideJSONStream)
